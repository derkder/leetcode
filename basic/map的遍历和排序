底层是红黑树

遍历输出：
for (auto it = mp.begin(); it != mp.end(); ++it) {
            ans.emplace_back(it->second);
        }

（



根据value排序的方法//不能直接map排序一定要转换到vector里用sort
bool cmp(pair<int, int>& a, pair<int, int>& b) {
    return a.second < b.second;
}
int main() {
    map<int, int> myMap;
    ...
     // 将map中的键值对交换
    vector<pair<int, int> > vec(myMap.begin(), myMap.end());
    // 根据value进行排序
    sort(vec.begin(), vec.end(), cmp);
    // 打印排序结果
    for (auto& it : vec) {
        cout << "key: " << it.first << " value: " << it.second << endl;
    }
    //然后再把vector放进map里去
    //还没找到怎么放
}    




















// 第三种 用"array"方式插入
mapStudent[123] = "student_first";
mapStudent[456] = "student_second";
set的遍历*it
for(auto it=ret.begin();it!=ret.end();it++) res.emplace_back(*it);
）




第一种定义：
typedef map<int,CString> UDT_MAP_INT_CSTRING;
UDT_MAP_INT_CSTRING enumMap;
正常的定义：
// 定义一个map对象
map<int, string> mapStudent;
// 第一种 用insert函數插入pair
mapStudent.insert(pair<int, string>(000, "student_zero"));
// 第二种 用insert函数插入value_type数据
mapStudent.insert(map<int, string>::value_type(001, "student_one"));
// 第三种 用"array"方式插入
mapStudent[123] = "student_first";
mapStudent[456] = "student_second";

// find 返回迭代器指向当前查找元素的位置否则返回map::end()位置
aoto iter = mapStudent.find("123");
if(iter != mapStudent.end())
       cout<<"Find, the value is"<<iter->second<<endl;
else
   cout<<"Do not Find"<<endl;
//迭代器刪除
iter = mapStudent.find("123");
mapStudent.erase(iter);
//用关键字刪除
int n = mapStudent.erase("123"); //如果刪除了會返回1，否則返回0
//用迭代器范围刪除 : 把整个map清空
mapStudent.erase(mapStudent.begin(), mapStudent.end());
//等同于mapStudent.clear()

int nSize = mapStudent.size();


一个初始化
unordered_map<char, string> phoneMap{
            {'2', "abc"},
            {'3', "def"},
            {'4', "ghi"},
            {'5', "jkl"},
            {'6', "mno"},
            {'7', "pqrs"},
            {'8', "tuv"},
            {'9', "wxyz"}
        };


//另一种迭代器使用方式
unordered_set<string>::iterator iter1;
    for(iter1 = set1.begin(); iter1 != set1.end(); iter1++)
    {
        cout << *iter1 << "\t";
    }
    cout << endl;
