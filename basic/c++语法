使用类和使用数组定义向量：
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        return 0;
    };
int main()
{
    int a[3] = { 1, 1, 1 };
    vector<int> b(a, a + 3);
    Solution s1;
    std::cout << s1.minCostClimbingStairs(b)<<endl;
}





map
第一种定义：
typedef map<int,CString> UDT_MAP_INT_CSTRING;
UDT_MAP_INT_CSTRING enumMap;
正常的定义：
// 定义一个map对象
map<int, string> mapStudent;
// 第一种 用insert函數插入pair
mapStudent.insert(pair<int, string>(000, "student_zero"));
// 第二种 用insert函数插入value_type数据
mapStudent.insert(map<int, string>::value_type(001, "student_one"));
// 第三种 用"array"方式插入
mapStudent[123] = "student_first";
mapStudent[456] = "student_second";

// find 返回迭代器指向当前查找元素的位置否则返回map::end()位置
aoto iter = mapStudent.find("123");
 
if(iter != mapStudent.end())
       cout<<"Find, the value is"<<iter->second<<endl;
else
   cout<<"Do not Find"<<endl;
   
//迭代器刪除
iter = mapStudent.find("123");
mapStudent.erase(iter);
 
//用关键字刪除
int n = mapStudent.erase("123"); //如果刪除了會返回1，否則返回0
 
//用迭代器范围刪除 : 把整个map清空
mapStudent.erase(mapStudent.begin(), mapStudent.end());
//等同于mapStudent.clear()

int nSize = mapStudent.size();




