可以直接确定查找值所在位置，而不需要一个个比较。这样就**“预先知道”**key所在的位置，直接找到数据，提升效率。
即
地址index=H（key）
说白了，hash函数就是根据key计算出应该存储地址的位置，而哈希表是基于哈希函数建立的一种查找表

一个非常简洁的hashtable使用：
题目：
剑指 Offer II 032. 有效的变位词
给定两个字符串 s 和 t ，编写一个函数来判断它们是不是一组变位词（字母异位词）。
class Solution {
public:
    bool isAnagram(string s, string t) {
        unordered_map<char, int> map;
        for(int i = 0; i < max(s.size(), t.size()); i ++) 
            map[s[i]] ++, map[t[i]] --;//可以用字符作为map的key值改动map
        for(auto it : map) //遍历map 的方式
            if(it.second != 0) return false;
        return true;
    }
};

class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size() != t.size()) return false;
        unordered_map<char, int> map;
        for(char c : s) map[c] ++;
        for(char c : t) 
            if(-- map[c] == -1) return false;
        return true;
    }
};





正常的例子：（和正常的set差不多，都不像哈希表了）
一个非常直观的思路是：我们遍历链表中的每个节点，并将它记录下来；一旦遇到了此前遍历过的节点，就可以判定链表中存在环。借助哈希表可以很方便地实现。
原型：剑指 Offer II 022. 链表中环的入口节点
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        unordered_set<ListNode *> visited;
        while (head != nullptr) {
            if (visited.count(head)) {//count() 用来查找set中某个某个键值出现的次数。
                return head;
            }
            visited.insert(head);
            head = head->next;
        }
        return nullptr;
    }
};




非常特殊的例子
原型：leetcode1两数之和
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
因为map是由红黑树实现的，所以查找起来很快
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> hashtable;
        for (int i = 0; i < nums.size(); ++i) {
            auto it = hashtable.find(target - nums[i]);//居然是每个循环赋值一个新的
            if (it != hashtable.end()) {
                return {it->second, i};//返回两个东西的方法，注意第一个参数的返回那里是否没有原括号的
                //->second引到value，即下标
            }
            hashtable[nums[i]] = i;
        }
        return {};
    }
};
//因为是用值找的，所以值是索引，key是值，value是下标


char用单引号，string用双引号
