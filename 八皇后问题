回溯法（back tracking）（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，
这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。
白话：回溯法可以理解为通过选择不同的岔路口寻找目的地，一个岔路口一个岔路口的去尝试找到目的地。如果走错了路，继续返回来找到岔路口的另一条路，直到找到目的地。



代码实现八皇后问题
我们将算法也设置成两步，
第一步 我们要判断每次输入的皇后是否在同一行同一列，或者同一斜线上。
bool is_ok(int row){            //判断设置的皇后是否在同一行，同一列，或者同一斜线上
    for (int j=0;j<row;j++)
    {
        if (queen[row]==queen[j]||row-queen[row]==j-queen[j]||row+queen[row]==j+queen[j])
            return false;       
    }
    return true;
}

第二步 我们用十行代码来进入我们核心算法
void back_tracking(int row=0)    //算法函数，从第0行开始遍历
{
    if (row==n)
        t ++;               //判断若遍历完成，就进行计数     
        for (int col=0;col<n;col++)     //遍历棋盘每一列
        //这个for就隐形地实现了如果遇到达不到目标的，就会回退一步
        {
            queen[row] = col;           //将皇后的位置记录在数组
            if (is_ok(row))             //判断皇后的位置是否有冲突
                back_tracking(row+1);   //递归，计算下一个皇后的位置
        }
}
代码实现算法也是比较简单的，主要还是看是否掌握算法思想。
