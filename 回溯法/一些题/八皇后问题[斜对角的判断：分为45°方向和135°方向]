回溯法（back tracking）（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，
这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。
白话：回溯法可以理解为通过选择不同的岔路口寻找目的地，一个岔路口一个岔路口的去尝试找到目的地。如果走错了路，继续返回来找到岔路口的另一条路，直到找到目的地。



代码实现八皇后问题
//主函数
vector<vector<string>> solveNQueens(int n) { 
    vector<vector<string>> ans; 
    if (n == 0) return ans；
    vector<string> board(n, string(n, ’.’)); 
    vector<bool> column(n, false), ldiag(2*n-1, false), rdiag(2*n-1, false); 
    backtracking(ans, board, column, ldiag, rdiag, 0, n); 
    return ans;
}
// 辅函数 
void backtracking(vector<vector<string>> &ans, vector<string> &board, vector< bool> &column, vector<bool> &ldiag, vector<bool> &rdiag, int row, int n){ 
    if (row == n) {
    ans.push_back(board); 
    return;
    }
    for (int i = 0; i < n; ++i) { 
        if (column[i] || ldiag[n-row+i-1] || rdiag[row+i+1]) { 
            continue;
        }
        // 修改当前节点状态 
        board[row][i] = ’Q’; 
        column[i] = ldiag[n-row+i-1] = rdiag[row+i+1] = true; 
        // 递归子节点 
        backtracking(ans, board, column, ldiag, rdiag, row+1, n); 
        // 回改当前节点状态 
        board[row][i] = ’.’; 
        column[i] = ldiag[n-row+i-1] = rdiag[row+i+1] = false;
    }
}
