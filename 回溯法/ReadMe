回溯法（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。
但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。
//!!!!!!!!
在具体的写法上，它与普通的深度优先搜索一样，都有 [修改当前节点状态]→[递归子节点] 的步骤，只是多了回溯的步骤，变成了 [修改当前节点状态]→[递归子节点]→[回改当前节点状态]。
//!!!!!!!!

用于："所有可能的解"
因为每一次return都只会退出一层递归
所以不是要求所有的解这样算很浪费，很容易测试用例有超出来的

//感觉回溯法很慢，大多数一下子能想到回溯法的一般有更好的方式代替（dp、贪心等），所以感觉除了求全部解不要用回溯


先画出树图//！！！
再套模板
public void backtracking (此时已经走完的路径startIndex，此次可选择的选择列表n,终止条件){//！！！！！
    if(判断出口的条件){
        存放结果;
        return;//递归的最深度，即终止
       }
    for(int i=();i<选择列表长度;i++){//列表长度是所有的选择长度
     处理节点;//！！！！！！！
     backtracking(此时已经走完的路径startIndex，此时的选择列表,终止条件)//此时列表是下一节点的列表
     撤销上一步的路径;//！！！！！！！
    }
   }
}
