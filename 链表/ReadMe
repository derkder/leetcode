感觉好多巧妙的解都用的反转链表，三个指针，其中next在每次cur！=null的循环中赋值
//还有反转链表的递归算法也很重要，qq考了好像（沉默一小下自闭一辈子）
class Solution {//!!!很容易乱掉没那么间接，pre和cur各往前移一个在运算过程中，整个链表是断掉的
//https://leetcode.cn/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-shuang-zhi-zhen-di-gui-yao-mo-/
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        while (curr) {
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
};

struct ListNode{
    int val;
    ListNode *next;
    ListNode(int x): val(x), next(nullptr){}//没有分号这里！！！！
}


ListNode *list=new ListNode(0);


链表题指来指去指不对的原因多半是：当pre=next后，pre->next也会改变next->next的呀呀呀

