链接：https://leetcode.cn/problems/find-the-duplicate-number
给定一个包含 n + 1 个整数的数组 nums ，其数字都在 [1, n] 范围内（包括 1 和 n），可知至少存在一个重复的整数。
假设 nums 只有 一个重复的整数 ，返回 这个重复的数 。
你设计的解决方案必须 不修改 数组 nums 且只用常量级 O(1) 的额外空间。



方法一：二分查找
//核心：数小于等于自己（记为mid）的数有多少个（记为cnt），若cnt小于等于mid说明找的数在mid右边viseversa，对于每一个数进行遍历，这样不会超过空间要求，然后用二分优化
//虽然数组里的数是无序的，但是数字的范围就在[1, n]里，所以可以二分
（基础：我们定义cnt[i] 表示nums 数组中!!小于等于i的数!!有多少个，假设我们重复的数是target，那么[1,target−1]里的所有数满足cnt[i]≤i，[target,n] 里的所有数满足cnt[i]>i，具有单调性。）
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        int l = 1, r = n - 1, ans = -1;
        while (l <= r) {
            int mid = (l + r) >> 1;
            int cnt = 0;
            for (int i = 0; i < n; ++i) {
                cnt += nums[i] <= mid;
            }
            if (cnt <= mid) {
                l = mid + 1;
            } else {
                r = mid - 1;
                ans = mid;
            }
        }
        return ans;
    }
};

链接：https://leetcode.cn/problems/find-the-duplicate-number/solution/xun-zhao-zhong-fu-shu-by-leetcode-solution/









方法2 快慢指针【参考环形指针2,把数组看作是有环链表，每个num【i】指向index=num【i】的数]
按照下面的方式移动快慢指针
slow = nums[slow];
fast = nums[nums[fast]];
至到fast==slow，派出ptr指针找到环的人口就是重复数字


