法一、单指针
两次遍历。在第一次遍历中，我们将数组中所有的 0 交换到数组的头部。在第二次遍历中，我们将数组中所有的 1 交换到头部的 0 之后


法二、双指针[p0,p2,i]
使用指针p0来交换0，p2来交换2;  p0从左向右，p2是从右向左；  从左向右遍历整个数组，设当前遍历到的位置为i
如果i指向0，和p0指向的数字换，交换后，如果p0指向0，p0++；如果i指向2，vise versa；如果指向1，i++
其中，要当我们找到 2 时，我们需要!!//不断//!!地将其与 nums[p2] 进行交换，直到新的 nums[i] 不为 2
终止条件i>p2
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        int p0 = 0, p2 = n - 1;
        for (int i = 0; i <= p2; ++i) {
            while (i <= p2 && nums[i] == 2) {
                swap(nums[i], nums[p2]);
                --p2;
            }
            if (nums[i] == 0) {
                swap(nums[i], nums[p0]);
                ++p0;
            }
        }
    }
};

链接：https://leetcode.cn/problems/sort-colors/solution/yan-se-fen-lei-by-leetcode-solution/
