1823. 找出游戏的获胜者
共有 n 名小伙伴一起做游戏。小伙伴们围成一圈，按 顺时针顺序 从 1 到 n 编号。确切地说，从第 i 名小伙伴顺时针移动一位会到达第 (i+1) 名小伙伴的位置，
其中 1 <= i < n ，从第 n 名小伙伴顺时针移动一位会回到第 1 名小伙伴的位置。


第一种最好的解法【除了这个难理解，下面两种都又好理解又好】[貌似不难理解的]
https://leetcode-cn.com/circle/article/BOoxAL/
f(n,k)=(k+f(n−1,k)−1)modn+1//只要把f(n,k)看成下标，这个公式肉眼就可以看出来!!!具体推导就是找f(n,k)和f(n−1,k)的关系，具体具体看链接&链接评论1
class Solution {
public:
    int findTheWinner(int n, int k) {
        int winner = 1;
        for (int i = 2; i <= n; i++) {
            winner = (k + winner - 1) % i + 1;
        }
        return winner;
    }
};
上面的迭代不太方便理解，下面的递归特别好理解（原问题答案等价于 findTheWinner(n - 1, k) + k
class Solution {
public:
    int lastRemaining(int n, int m) {
        if(1==n) return 0;
        return (lastRemaining(n-1,m)+m)%n;
    }
};



第二种是上面一种的基础解法//人类可以想到的还凑合的解法，比下面一种好在不用一个个看过去，核心就是下面一条公式，之前尝试过不行的原因也放在代码后面了
index=(index+m-1)%(list.size());
class Solution {
    public int lastRemaining(int n, int m) {
        if(m==1)
            return n-1;
        List<Integer>list=new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            list.add(i);//list.push_back(i);
;        }
        int index=0;
        while (list.size()>1)
        {
            index=(index+m-1)%(list.size());
            list.remove(index);//list.erase（index）;
        }
        return list.get(0);
    }
}
//这里虽然是java的list，但在c++也差不多，关键我之前不行是因为不要用迭代器一个个在list里找位置，而是用index下标去找位置








还有一种解法是用队列模拟环形链表【也是很好的方法了,但是应该挺慢的】
class Solution {
public:
    int findTheWinner(int n, int k) {
        queue<int> qu;
        for (int i = 1; i <= n; i++) {
            qu.emplace(i);
        }
        while (qu.size() > 1) {//每次留下的元素放到队尾再弹出队首的，还是蛮妙的
            for (int i = 1; i < k; i++) {
                qu.emplace(qu.front());
                qu.pop();
            }
            qu.pop();
        }
        return qu.front();
    }
};


