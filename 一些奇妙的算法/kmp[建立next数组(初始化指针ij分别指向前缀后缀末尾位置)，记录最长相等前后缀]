https://blog.csdn.net/weixin_46007276/article/details/104372119
在一个已知字符串中查找子串的位置,上面是很厉害的链接




核心：建立next数组，记录【字串的】最长相等前后缀
next[i]=j,含义是：下标为i 的字符前的字符串最长相等前后缀的长度为j，也表示该处字符不匹配时应该回溯到的字符的下标
（next[0]=-1）

求next数组：
[定义两个指针k和j，k指向前缀末尾位置，j指向后缀末尾位置]
int j = -1;
next[0] = j;
while (j<t.length-1) //不是<= 
{	
  if (k==-1 || t.data[j]==t.data[k]) 	//k为-1或比较的字符相等时
  {	
    j++;k++;
    next[j]=k;
  }
  else k=next[k];
}

整体：
int strStr(string haystack, string needle) {
        vector<int> next(haystack.length(),0);
        next[0]=-1;
        if(needle.length()>haystack.length()) return -1;
        //初始化next数组
        int k=-1,j=0;
        while(j<(int)needle.length()-1){
            if(-1==k||needle[j]==needle[k]){
                j++;k++;
                next[j]=k;
                //cout<<j<<next[j]<<endl;
            }
            else k=next[k];
        }
        //kmp算法，移动的是字串
        int i=0;j=0;
        while( j<(int)needle.length() && i<haystack.length() ){
            if(-1==j||needle[j]==haystack[i]){
                i++;j++;
            }
            else j=next[j];//把子串往前移动
        }
        if(j>=needle.length()) return(i-needle.length());
        else return -1;
    }
