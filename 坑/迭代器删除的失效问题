C++中利用迭代器删除元素会发生什么？
（1）对于关联容器（如map，set，multimap，multiset），删除当前的iterator，仅仅会使当前的iterator失效，只要在erase时，递增当前的iterator即可。
这是因为map之类的容器，使用了红黑树来实现，插入，删除一个结点不会对其他结点造成影响。
set<int> valset = { 1,2,3,4,5,6 };
set<int>::iterator iter;
for (iter = valset.begin(); iter != valset.end(); )
{
     if (3 == *iter)
          valset.erase(iter++);//这里是先erase了iter指向的，再给iter++了
     else
          ++iter;
}


（2）对于序列式容器（如vector，deque等），删除当前的iterator会使后面所有元素的iterator都失效。这是因为vector，deque使用了连续分配的内存，
删除一个元素导致后面所有的元素会向前移动一个位置。！！！！不过erase方法可以返回下一个有效的iterator。!!!!使用方式如下,例如：
vector<int> val = { 1,2,3,4,5,6 };
vector<int>::iterator iter;
for (iter = val.begin(); iter != val.end(); )
{
     if (3 == *iter)
          iter = val.erase(iter);     //返回下一个有效的迭代器，无需+1
     else
          ++iter;
}
