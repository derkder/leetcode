有一堆石头，每块石头的重量都是正整数。
每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：
如果 x == y，那么两块石头都会被完全粉碎；
如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。
最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。




//细节一直错nmd
//这种问题是01背包里特殊的，dp[i][j]表示前i个石头是否能凑出重量j
class Solution {
public:
    int lastStoneWeightII(vector<int>& stones) {
        int n=stones.size();
        int sum=accumulate(stones.begin(),stones.end(),0);
        vector<vector<int>> dp(n,vector<int>(sum/2+1,0));
        for(int j=stones[0];j<=sum/2;++j) dp[0][j]=stones[0];//！！！！
        for(int i=1;i<n;++i){
            for(int j=0;j<=sum/2;++j){
                if(j<stones[i]) dp[i][j]=dp[i-1][j];//！！！！
                else dp[i][j]=max(dp[i-1][j],dp[i-1][j-stones[i]]+stones[i]);
            }
        }
        return abs(sum-dp[n-1][sum/2]*2);
    }
};

//知道是01背包之后貌似自己可以做出来了！
//核心是把这个公式印在脑子里： dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);
//看了解答发现想歪了，问题应该转换为：分割等和子集，同时一直记录最小的情况
//dp[i][j]代表考虑前 i 个物品（数值），凑成总和不超过 j 的最大价值
