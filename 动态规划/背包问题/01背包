法一、二维dp数组
  dp[i][j] 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少。
  ！！递归公式： dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);！！【！！第一个参数是不放进去，第二个参数是放进去！！】
  上面的两条并不是人类能想出来的程度，max第二个参数表示假设背包最大能装j - weight[i]且只在[0-i-1]里选择，这样保证了物品i一定能放进去


优化：一维数组（滚动数组）
  在一维dp数组中，dp[j]表示：容量为j的背包，所背的物品价值可以最大为dp[j]。
  dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);
  物品遍历放外层，背包遍历放内层，且内侧for循环倒序(倒序遍历是为了保证物品i只被放入一次！)  

完全背包和01背包的区别是
即一个商品如果可以重复多次放入是完全背包，而只能放入一次是01背包
