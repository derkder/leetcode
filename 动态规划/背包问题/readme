不适用贪心，要用dp的
https://tangshusen.me/2019/11/24/knapsack-problem/

还有分割等和的问题也包含在里面,在这种wenti中dp[i][j]不是表示前i个石头堆出来的最大calue，而是表示前i个石头是否能凑出重量j


止步于01背包和完全背包（笨蛋一个应付下面试笔试得了）
二维(都是外循环是物品内循环是重量，且两层循环都是从小到大)
01背包
!!二维数组的初始化(其实想想递归公式就知道了)： 
  for (int j = weight[0]; j <= bagweight; j++) dp[0][j] = value[0];
 二维数组的递归
  for(int i = 1; i < weight.size(); i++) { // 遍历物品
    for(int j = 0; j <= bagweight; j++) { // 遍历背包容量
        if (j < weight[i]) dp[i][j] = dp[i - 1][j]; //！！！！！！！！！！！！！！！！！！！！！防止下面的赋值发生溢出的情况（dp[i - 1][j - weight[i]]的第二个数字小于0）
        else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);

    }
}
完全背包
dp[i][j]=max(dp[i−1][j],dp[i][j−w]+v[i]))(当j≥w_i时)
不同的是，当选择了物品 𝑖时，背包仍然可以继续选择该物品，所以 dp[i][j-w_i] 是从当前行继续选择。
for (int i = 1; i <= n; ++i) {
      for (int j = 0; j <= W; ++j) {
          if (j >= weights[i - 1])  dp[i][j] = max(dp[i - 1][j], dp[i][j - weights[i - 1]] + values[i - 1]);
          else   dp[i][j] = dp[i - 1][j];
      }
}











一维
！！！如果使用一维dp数组，物品遍历放外层，背包遍历放内层，且内侧for循环倒序！！！！
01背包：
第二层循环从大到小！！
for(int i = 0; i < weight.size(); i++) { // 遍历物品
    for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量
        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);
    }
}

完全背包：
// 先遍历物品，再遍历背包(这样对应组合数-只有{1, 5}，先背包后物品的话就是排列数了-包含了{1, 5} 和 {5, 1}两种情况)
//第二层循环从小到大
for(int i = 0; i < weight.size(); i++) { // 遍历物品
    for(int j = weight[i]; j <= bagWeight ; j++) { // 遍历背包容量,是weight[i]不是weight[0]
        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);

    }
}
