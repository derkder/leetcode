不适用贪心，要用dp的
https://tangshusen.me/2019/11/24/knapsack-problem/

还有分割等和的问题也包含在里面


止步于01背包和完全背包（笨蛋一个应付下面试笔试得了）


!!二维数组的初始化(其实想想递归公式就知道了)： 
  for (int j = weight[0]; j <= bagweight; j++) dp[0][j] = value[0];
 二维数组的递归
  for(int i = 1; i < weight.size(); i++) { // 遍历物品
    for(int j = 0; j <= bagweight; j++) { // 遍历背包容量
        if (j < weight[i]) dp[i][j] = dp[i - 1][j]; //！！！！！！！！！！！！！！！！！！！！！
        else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);

    }
}



一维
！！！如果使用一维dp数组，物品遍历放外层，背包遍历放内层，且内侧for循环倒序！！！！
01背包：
第二层循环从大到小！！
for(int i = 0; i < weight.size(); i++) { // 遍历物品
    for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量
        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);
    }
}

完全背包：
// 先遍历物品，再遍历背包
//第二层循环从小到大
for(int i = 0; i < weight.size(); i++) { // 遍历物品
    for(int j = weight[i]; j <= bagWeight ; j++) { // 遍历背包容量
        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);

    }
}
