输入：text1 = "abcde", text2 = "ace" 
输出：3  
解释：最长公共子序列是 "ace" ，它的长度为 3 。


class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        //dp[i][j] 表示 text1[0:i - 1]和 text2[0:j]- 1的最长公共子序列的长度。
        //之所以 dp[i][j] 的定义不是 text1[0:i] 和 text2[0:j] ，是为了方便当 i = 0 或者 j = 0 的时候，dp[i][j]表示的为空字符串和另外一个字符串的匹配，这样 dp[i][j] 可以初始化为 0.
        //递推公式：
        //if (text1[i - 1] == text2[j - 1]) dp[i][j] = dp[i - 1][j - 1] + 1;合理
        //else dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);//hum....,能理解但有点怪，可能要多做攒感觉吧
        int n1 = text1.length();
        int n2 = text2.length();
        vector<vector<int>> dp(n1 + 1, vector<int>(n2 + 1, 0));
        for(int i = 0; i < n1; ++i){
            dp[i][0] = 0;
        }
        for(int i = 0; i < n2; ++i){
            dp[0][i] = 0;
        }
        for(int i = 1; i <= n1; ++i){
            for(int j = 1; j <= n2; ++j){
                if(text1[i - 1] == text2[j - 1]) dp[i][j] = dp[i - 1][j - 1] + 1;
                else dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
        return dp[n1][n2];
    }
};
// @lc code=end

