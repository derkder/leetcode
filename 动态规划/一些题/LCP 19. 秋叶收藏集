小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 leaves， 字符串 leaves 仅包含小写字符 r 和 y， 其中字符 r 表示一片红叶，字符 y 表示一片黄叶。
出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶
替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。



class Solution {
public:
    int minimumOperations(string leaves) {
        int n=leaves.size();
        vector<vector<int>> dp(n,vector<int>(3,0));
        dp[0][0]=(leaves[0]=='y');
        dp[0][1]=dp[0][2]=dp[1][2]=INT_MAX;//!!把不可能的情况置为INT_MAX(本来完全没想到)
        //dp[i][j]表示到第i个叶子，第i个叶子当前！！（变成）处于！！j状态(状态 0 和状态 2分别表示前面和后面的红色部分，状态 1 表示黄色部分。)
        for(int i=1;i<n;i++){
            int isRed=(leaves[i]=='r');
            int isYellow=(leaves[i]=='y');
            dp[i][0]=dp[i-1][0]+isYellow;
            dp[i][1]=min(dp[i-1][0],dp[i-1][1])+isRed;
            if(i>=2) dp[i][2]=min(dp[i-1][1],dp[i-1][2])+isYellow;
        }
        return dp[n-1][2];
    }
};
//很难想到的dp
