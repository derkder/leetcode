给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。
你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。
返回获得利润的最大值


class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        //dp[i][j] j为0或1 0代表手里没有股票，1代表有
        //一开始没想到
        //这就相当于两个dp数组其实，一个记录当前手里有股票的最大，一个记录当前手里没股票的最大
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int>(2, INT_MIN));
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for(int i = 1; i < n; ++i){
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i] - fee);
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]);
        }
        return max(dp[n - 1][0], dp[n - 1][1]);
    }
};
