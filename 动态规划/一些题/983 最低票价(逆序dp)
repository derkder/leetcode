题目描述：
    在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。
    火车票有 三种不同的销售方式 ：
    一张 为期一天 的通行证售价为 costs[0] 美元；
    一张 为期七天 的通行证售价为 costs[1] 美元；
    一张 为期三十天 的通行证售价为 costs[2] 美元。
    通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张 为期 7 天 的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。
    返回 你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费 。
https://leetcode.cn/problems/minimum-cost-for-tickets


一开始想学智力问题用逆序，但是感觉他不是连续的天数
结果就是逆序，我是笨蛋罢了
因为这道题也是有无后效性的：解决与否会影响到后面一定数量题目的结果，但不会影响到前面题目的解决
对于一年中的任意一天：
如果这一天不是必须出行的日期，那我们可以贪心地选择不买。这是因为如果今天不用出行，那么也不必购买通行证，并且通行证越晚买越好。所以有 
dp(i)=dp(i+1)
如果这一天是必须出行的日期，我们可以选择买 1，7 或 30天的通行证。若我们购买了 j 天的通行证，那么接下来的 j−1 天，我们都不再需要购买通行证，只需要考虑第 i+j 天及以后即可。因此，我们有
dp(i)=min{cost(j)+dp(i+j)},j∈{1,7,30}


class Solution {
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        int n = days.size();
        set<int> s;
        vector<int> last{1, 7, 30};
        for(int i = 0; i < n; ++i){
            s.insert(days[i]);
        }
        //解决第i天及以后题目的最低价格
        vector<int> dp(365 + 30 , 0);
        dp[days[n - 1]] = min(min(costs[0],costs[1]),costs[2]);
        for(int i = days[n - 1] - 1; i >= 0 ; --i){
            if(0 == s.count(i)){
                dp[i] = dp[i + 1];
                continue;
            }
            dp[i] = min(min(dp[i + 1] + costs[0], dp[i + 7] + costs[1]), dp[i + 30] + costs[2]);
            cout<<i<<dp[i]<<endl;
        }
        return dp[0];
    }
};
