https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/
//动态规划是想到了，但状态想得不对又不自信走歪到单调栈了,另外注意返回
// dp[i][0]: 手上持有股票的最大收益
// dp[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益
// dp[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益
//本来想的是012对应买入卖出冷静期，感觉还是要更往状态的方向想，像whether持有whether处于冷静期这种
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(3,0));
        dp[0][0]=-prices[0];
        for(int i=1;i<n;++i){
            dp[i][0]=max(dp[i-1][2]-prices[i],dp[i-1][0]);
            dp[i][1]=dp[i-1][0]+prices[i];
            dp[i][2]=max(dp[i-1][2],dp[i-1][1]);
        }
        return max(dp[n-1][1],dp[n-1][2]);
    }
};
这个还有空间上更简化的：
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int f0 = -prices[0];
        int f1 = 0;
        int f2 = 0;
        for (int i = 1; i < n; ++i) {
            int newf0 = max(f0, f2 - prices[i]);
            int newf1 = f0 + prices[i];
            int newf2 = max(f1, f2);
            f0 = newf0;
            f1 = newf1;
            f2 = newf2;
        }

        return max(f1, f2);
    }
};
链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/solution/zui-jia-mai-mai-gu-piao-shi-ji-han-leng-dong-qi-4/
