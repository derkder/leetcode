降低空间复杂度
具体：貌似是利用变量代替dp数组，例如下面的题
53. 最大子数组和
给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
未优化前：
class Solution {
    //dp【i】 代表以第 i个数结尾的「连续子数组的最大和
    //f(i)=max{f(i−1)+nums[i],nums[i]}
    //再优化就是用pre变量记录f【i-1】
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,INT_MIN);
        dp[0]=nums[0];
        int ans=dp[0];
        for(int i=1;i<n;++i){
            dp[i]=max(dp[i-1]+nums[i],nums[i]);
            ans=ans>dp[i]?ans:dp[i];
        }
        return ans;
    }
};

优化后：
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int pre = 0, maxAns = nums[0];
        for (const auto &x: nums) {
            pre = max(pre + x, x);
            maxAns = max(maxAns, pre);
        }
        return maxAns;
    }
};



ps这题有更好的解法：
分治：
lSum 表示 [l,r]内以 l 为左端点的最大子段和
rSum 表示 [l,r]内以 r 为右端点的最大子段和
mSum 表示 [l,r]内的最大子段和
iSum 表示 [l,r]的区间和



























另一种滚动数组：
礼物的最大价值：
f(i,j) 只会从 f(i−1,j) 和 f(i,j−1) 
class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> f(2, vector<int>(n));
        for (int i = 0; i < m; ++i) {
            int pos = i % 2;
            for (int j = 0; j < n; ++j) {
                f[pos][j] = 0;
                if (i > 0) {
                    f[pos][j] = max(f[pos][j], f[1 - pos][j]);
                }
                if (j > 0) {
                    f[pos][j] = max(f[pos][j], f[pos][j - 1]);
                }
                f[pos][j] += grid[i][j];
            }
        }
        return f[(m - 1) % 2][n - 1];
    }
};

作者：LeetCode-Solution
链接：https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/solution/li-wu-de-zui-da-jie-zhi-by-leetcode-solu-g64i/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。













