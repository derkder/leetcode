给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。
请你设计并实现时间复杂度为 O(n) 的算法解决此问题。
输入：nums = [100,4,200,1,3,2]
输出：4
解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。

class Solution {
public:
//哈希表不重要，重要的是判断要跳过的条件。
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> s;
        for(int num:nums){
            s.insert(num);
        }
        int ans=0;
        for(int num:s){//一直往大于1的方向搜
            if(!s.count(num-1)){//只有set中不存在比nums小1的数才开始判断，避免重复判断
            //比如说遍历到3的时候，3其实在遍历1的时候已经在当前最长序列里了，不应当重复判断
            //所以，先看set中有没有2，发现有，说明发现3是在当前最长序列里了
                int temp=1;
                int currentNum=num;
                while(s.count(currentNum+1)){
                    temp++;
                    currentNum++;
                }
                ans=max(ans,temp);
            }
        }
        return ans;
    }
};

